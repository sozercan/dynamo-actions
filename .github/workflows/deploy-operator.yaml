name: deploy-operator

on:
  workflow_dispatch:
    inputs:
      dynamo_version:
        description: "Specific dynamo release tag (e.g. v0.5.0). Leave blank to use latest."
        required: false
      skip_gpu_check:
        description: "Skip GPU validation pod (set true for CPU-only clusters)."
        type: boolean
        default: false
        required: false

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.dynamo_version || 'latest' }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Verify kubectl, helm, and docker
        run: |
          set -euo pipefail
          for bin in kubectl helm docker; do
            if ! command -v "$bin" >/dev/null 2>&1; then
              echo "::error::Required tool '$bin' not found in PATH" >&2
              exit 1
            fi
          done
          kubectl version --client
          helm version
          docker version
      - name: Validate cluster NVIDIA GPUs
        if: ${{ github.event.inputs.skip_gpu_check != 'true' }}
        run: |
          set -euo pipefail
          echo "Checking for GPU-capable nodes (allocatable nvidia.com/gpu > 0)..."
          gpu_nodes=$(kubectl get nodes -o json | jq -r '.items[] | select(.status.allocatable["nvidia.com/gpu"] != null and .status.allocatable["nvidia.com/gpu"] != "0") | .metadata.name')
          if [ -z "$gpu_nodes" ]; then
            echo "::error::No nodes with allocatable nvidia.com/gpu found in cluster" >&2
            kubectl get nodes -o wide || true
            exit 1
          fi
          echo "GPU nodes detected:"; echo "$gpu_nodes" | sed 's/^/ - /'

          POD_NAME=nvidia-smi-check
          POD_MANIFEST=deploy/util/gpu-validation-pod.yaml
          echo "Applying GPU validation pod manifest $POD_MANIFEST..."
          [ -f "$POD_MANIFEST" ] || { echo "::error::Manifest $POD_MANIFEST not found" >&2; exit 1; }
          kubectl apply -f "$POD_MANIFEST"

          echo "Waiting for pod to become Ready..."
          if ! kubectl wait --for=condition=Ready pod/${POD_NAME} --timeout=180s; then
            echo "::error::GPU validation pod failed to become Ready" >&2
            kubectl describe pod ${POD_NAME} || true
            kubectl logs ${POD_NAME} || true
            kubectl delete pod ${POD_NAME} --ignore-not-found --wait=false || true
            exit 1
          fi

          echo "Running nvidia-smi inside the pod..."
          if ! kubectl exec -i ${POD_NAME} -- nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv; then
            echo "::error::Failed to execute nvidia-smi inside GPU pod" >&2
            kubectl delete pod ${POD_NAME} --wait=false || true
            exit 1
          fi

          echo "Detailed GPU listing (nvidia-smi -L):"
          kubectl exec -i ${POD_NAME} -- nvidia-smi -L || true

          echo "Cleaning up validation pod..."
          kubectl delete pod ${POD_NAME} --wait=true
          echo "Cluster GPU validation succeeded."
      - name: Skip note (no GPU validation run)
        if: ${{ github.event.inputs.skip_gpu_check == 'true' }}
        run: echo "Skipping GPU validation step as requested (skip_gpu_check=true)."
      - name: Resolve dynamo version
        env:
          INPUT_DYNAMO_VERSION: ${{ github.event.inputs.dynamo_version }}
        run: |
          set -euo pipefail
          if [ -n "${INPUT_DYNAMO_VERSION}" ]; then
            DYNAMO_VERSION="${INPUT_DYNAMO_VERSION}"
            echo "Using provided dynamo version: ${DYNAMO_VERSION}"
          else
            DYNAMO_VERSION=$(curl -s https://api.github.com/repos/ai-dynamo/dynamo/releases/latest | jq -r .tag_name)
            echo "Fetched latest dynamo version: ${DYNAMO_VERSION}"
          fi
          echo "DYNAMO_VERSION=${DYNAMO_VERSION}" >> "$GITHUB_ENV"
      - name: Deploy Dynamo operator and platform
        shell: bash
        run: |
          NAMESPACE=dynamo-cloud
          RELEASE_VERSION="${RELEASE_VERSION:-${DYNAMO_VERSION#v}}"
          echo "NAMESPACE=${NAMESPACE}" >> "$GITHUB_ENV"
          export NAMESPACE RELEASE_VERSION

          helm fetch https://helm.ngc.nvidia.com/nvidia/ai-dynamo/charts/dynamo-crds-${RELEASE_VERSION}.tgz
          helm install dynamo-crds dynamo-crds-${RELEASE_VERSION}.tgz --namespace default

          kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          helm fetch https://helm.ngc.nvidia.com/nvidia/ai-dynamo/charts/dynamo-platform-${RELEASE_VERSION}.tgz
          helm install dynamo-platform dynamo-platform-${RELEASE_VERSION}.tgz --namespace ${NAMESPACE}
      - name: Create HF token secret
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
        run: |
          set -euo pipefail
          if [ -z "${HF_TOKEN:-}" ]; then
            echo "::warning::HF_TOKEN secret not provided; skipping secret creation"
            exit 0
          fi
          kubectl create secret generic hf-token-secret \
            --from-literal=HF_TOKEN="$HF_TOKEN" \
            -n ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

      - name: Validate operator deployment
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
        run: |
          set -euo pipefail
          helm status dynamo-crds --namespace default
          helm status dynamo-platform --namespace "${NAMESPACE}"
          kubectl get pods --namespace "${NAMESPACE}"
