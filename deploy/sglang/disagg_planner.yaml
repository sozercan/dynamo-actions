# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

apiVersion: nvidia.com/v1alpha1
kind: DynamoGraphDeployment
metadata:
  name: sglang-disagg-planner
spec:
  envs:
    - name: DYNAMO_SERVICE_CONFIG
      value: '{"Prometheus":{"global":{"scrape_interval":"5s"},"scrape_configs":[{"job_name":"prometheus","static_configs":[{"targets":["localhost:9090"]}]},{"job_name":"frontend","static_configs":[{"targets":["sglang-disagg-planner-frontend:8000"]}]}]}}'
    - name: DYNAMO_NAMESPACE
      value: "dynamo"
  services:
    Frontend:
      dynamoNamespace: dynamo
      componentType: frontend
      replicas: 1 # overridden by workflow if FRONTEND_REPLICAS provided
      extraPodSpec:
        mainContainer:
          image: $MAIN_CONTAINER_IMAGE
    Planner:
      dynamoNamespace: dynamo
      envFromSecret: hf-token-secret
      componentType: planner
      replicas: 1 # overridden by workflow if PLANNER_REPLICAS provided
      livenessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - "exit 0"
        periodSeconds: 60
        timeoutSeconds: 30
        failureThreshold: 10
      readinessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - "exit 0"
        initialDelaySeconds: 60
        periodSeconds: 60
        timeoutSeconds: 30
        failureThreshold: 10
      pvc:
        create: false
        name: dynamo-pvc # Must be pre-created before deployment and SLA profiler must have been run
        mountPoint: /data
      extraPodSpec:
        mainContainer:
          image: $MAIN_CONTAINER_IMAGE
          workingDir: /workspace/components/planner/src/dynamo/planner
          command:
            - /bin/sh
            - -c
          args:
            - "$PLANNER_COMMAND"
    Prometheus: # NOTE: ensures service creation for Prometheus component.
      dynamoNamespace: dynamo
      componentType: frontend
      replicas: 1 # overridden by workflow if PROMETHEUS_REPLICAS provided
      envs:
        - name: PYTHONPATH
          value: "/workspace/components/planner/src"
      livenessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - "exit 0"
        periodSeconds: 60
        timeoutSeconds: 30
        failureThreshold: 10
      readinessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - "exit 0"
        initialDelaySeconds: 30
        periodSeconds: 60
        timeoutSeconds: 30
        failureThreshold: 10
      extraPodSpec:
        mainContainer:
          image: $MAIN_CONTAINER_IMAGE
          workingDir: /workspace/components/backends/sglang
          command:
            - /bin/sh
            - -c
          args:
            - "$PROMETHEUS_COMMAND"
    decode:
      dynamoNamespace: dynamo
      envFromSecret: hf-token-secret
      componentType: worker
      replicas: 2 # overridden by workflow if DECODE_REPLICAS provided
      resources:
        limits:
          gpu: "${DECODE_GPUS}" # default 1
      extraPodSpec:
        mainContainer:
          image: $MAIN_CONTAINER_IMAGE
          workingDir: /workspace/components/backends/sglang
          command:
            - /bin/sh
            - -c
          args:
            - "$DECODE_COMMAND"
    prefill:
      dynamoNamespace: dynamo
      envFromSecret: hf-token-secret
      componentType: worker
      replicas: 2 # overridden by workflow if PREFILL_REPLICAS provided
      resources:
        limits:
          gpu: "${PREFILL_GPUS}" # default 1
      extraPodSpec:
        mainContainer:
          image: $MAIN_CONTAINER_IMAGE
          workingDir: /workspace/components/backends/sglang
          command:
            - /bin/sh
            - -c
          args:
            - "$PREFILL_COMMAND"
